{"id": "agent_context-0", "section": "Overview", "anchor": "overview", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "overview"], "part_index": 0, "text": "## Overview\n\n- Elements are modeled via “adapters” under `src/infrastructure/adapters`.\n- The base class is `ElementAdapter`, and specific elements extend it from `src/infrastructure/adapters/elements/*ElementAdapter.ts`.\n- Properties are defined and managed via a `Properties` system, supporting constraints, validators, options, subscriptions (reactive reactions), and internal/hidden flags.\n- Angular signals are used internally for state like selection, hover, dragging, etc."}
{"id": "agent_context-1", "section": "Element taxonomy (adapters)", "anchor": "element-taxonomy-adapters", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "element", "taxonomy", "(adapters)"], "part_index": 0, "text": "## Element taxonomy (adapters)\n\nLocated in `src/infrastructure/adapters/elements/`:\n\n- ButtonElementAdapter\n- CarouselWebElementAdapter\n- CheckboxElementAdapter\n- CheckboxLabelElementAdapter\n- ContainerElementAdapter\n- DeviceElementAdapter\n- DropdownElementAdapter\n- EllipseElementAdapter\n- ErrorElementAdapter\n- GroupElementAdapter\n- ImageElementAdapter\n- InputTextElementAdapter\n- LineConnectorElementAdapter\n- LineElementAdapter\n- NavBarELementAdapter\n- PathElementAdapter\n- ProgressBarElementAdapter\n- RadioElementAdapter\n- RadioIconElementAdapter\n- RectangleElementAdapter\n- SelectElementAdapter\n- SelectionElementAdapter\n# Ninjamock Editor – Agent Design Context (for RAG)\n\nScope: This document contains only the information needed for an agent that creates, modifies, deletes, and suggests UI elements. It excludes Angular classes/services and general project architecture.\n\nUse this document as retrieval context for tool-call generation and validation."}
{"id": "agent_context-2", "section": "Core concepts", "anchor": "core-concepts", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "core", "concepts"], "part_index": 0, "text": "## Core concepts\n\n- Element adapters: Code representations of element types, located in `src/infrastructure/adapters/elements/*ElementAdapter.ts`. Each adapter defines a serialized element type and its specific properties/behaviors on top of the base `ElementAdapter`.\n- Serialized element: JSON form stored/applied in the project, with `type`, `properties`, and `children`.\n- Template elements (templateId): Predefined components that instantiate one element or a composition of multiple elements with preset properties/states. They’re referenced via `templateId`.\n- Container element: A general-purpose element used to group/compose other elements.\n- Bindings: Dynamic property links between elements/properties (data-driven or interactive), defined as bindings rather than static values.\n- Layout: Currently primarily absolute positioning; transitioning to responsive (flex-like) layouts for future export to HTML/CSS.\n- States & tokens: Style states and design tokens to enable themeable, stateful designs aligned with HTML/CSS exports."}
{"id": "agent_context-3", "section": "Element types (adapters catalogue)", "anchor": "element-types-adapters-catalogue", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "element", "types", "(adapters", "catalogue)"], "part_index": 0, "text": "## Element types (adapters catalogue)\n\nAdapters reside under `src/infrastructure/adapters/elements/`. The serialized `type` typically corresponds to the adapter name without the `ElementAdapter` suffix, lowercased (unless overridden in code via `this.type`). Examples:\n\n- ButtonElementAdapter → type: \"button\"\n- ImageElementAdapter → type: \"image\"\n- TextElementAdapter → type: \"text\"\n- RectangleElementAdapter → type: \"rectangle\"\n- EllipseElementAdapter → type: \"ellipse\"\n- LineElementAdapter → type: \"line\"\n- LineConnectorElementAdapter → type: \"line-connector\" (or similar)\n- SvgElementAdapter → type: \"svg\"\n- PathElementAdapter → type: \"path\"\n- VideoElementAdapter → type: \"video\"\n- CheckboxElementAdapter → type: \"checkbox\"\n- RadioElementAdapter → type: \"radio\"\n- DropdownElementAdapter → type: \"dropdown\"\n- SelectElementAdapter → type: \"select\"\n- SliderElementAdapter → type: \"slider\"\n- ProgressBarElementAdapter → type: \"progress-bar\"\n- SidebarWebElementAdapter → type: \"sidebar-web\"\n- NavBarELementAdapter → type: \"navbar\"\n- GroupElementAdapter → type: \"group\"\n- ContainerElementAdapter → type: \"container\"\n- StackLayoutElementAdapter → type: \"stack-layout\"\n- TableElementAdapter → type: \"table\"\n- TableRowAdapter → type: \"table-row\"\n- TableCellAdapter → type: \"table-cell\"\n- TableSectionAdapter → type: \"table-section\"\n- DeviceElementAdapter → type: \"device\"\n- SelectionElementAdapter → type: \"selection\"\n- ShapeElementAdapter → type: \"shape\"\n- RadioIconElementAdapter → type: \"radio-icon\"\n- CheckboxLabelElementAdapter → type: \"checkbox-label\"\n- InputTextElementAdapter → type: \"input-text\"\n- ToogleElementAdapter → type: \"toggle\" (nomenclature may vary)\n- CarouselWebElementAdapter → type: \"carousel-web\"\n\nNote: The exact `type` can be customized per adapter. When in doubt, prefer the adapter-defined `this.type` in code."}
{"id": "agent_context-4", "section": "Templates vs direct elements", "anchor": "templates-vs-direct-elements", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "templates", "vs", "direct", "elements"], "part_index": 0, "text": "## Templates vs direct elements\n\n- Direct element: Use the element `type` directly in JSON.\n- Template element: Use `type: \"templated-element\"` with a `templateId` (e.g., \"button\", \"image\", etc.). Templates can instantiate single or multiple nested elements with preset properties and states.\n\nTemplate instantiation rules (children-as-root vs composite)\n\n- Key flags/shape on a template definition:\n  - persistentFields.isComposite: boolean indicating a multi-element composition with internal wiring/bindings.\n  - useChildAsRoot (aka isChildrenAsRoot): when true, the template’s child node(s) should be inlined as the actual element(s) in the project, not wrapped by a `templated-element`.\n  - children: may be a single object (single child) or an array (multiple children). Treat a single object as one-child.\n\n- Decision tree the agent must follow when creating from a templateId:\n  1) If isComposite is true OR the template represents a composition (multiple children/bindings), serialize as a wrapper:\n     - type: \"templated-element\"\n     - properties.templateId: the template id\n     - Do not inline the internal children.\n  2) If the template is a single concrete element (e.g., image, text) or useChildAsRoot is true, inline the child:\n     - type: child.type (e.g., \"image\")\n     - properties.templateId: keep the source template id\n     - Merge defaults from the template and user-specified overrides; children usually [].\n  3) If useChildAsRoot is true and there are multiple children, insert all top-level children. If a single parent is required, wrap them in a container/group.\n\nExamples\n\n- Direct element\n```json\n{\n  \"type\": \"image\",\n  \"properties\": {\n    \"name\": \"Logo\",\n    \"src\": { \"type\": \"url\", \"value\": \"https://...\" }\n  }\n}\n```\n\n- Template element\n```json\n{\n  \"type\": \"templated-element\",\n  \"properties\": {\n    \"templateId\": \"button-basic\",\n    \"name\": \"PrimaryCTA\",\n    \"left\": 186,\n    \"top\": 548,\n    \"width\": 73,\n    \"height\": 45,\n    \"zIndex\": 3\n  }\n}\n```\n\n- Inlined from a single-element template (children-as-root)\n```json\n{\n  \"type\": \"image\",\n  \"properties\": {\n    \"name\": \"Image\",\n    \"templateId\": \"image\",\n    \"left\": 122,\n    \"top\": 112,\n    \"width\": 128,\n    \"height\": 128,\n    \"zIndex\": 1,\n    \"src\": {\n      \"type\": \"url\",\n      \"value\": \"https://images.unsplash.com/photo-1519125323398-675f0ddb6308?auto=format&fit=crop&w=400&q=80\"\n    }\n  },\n  \"children\": []\n}\n```"}
{"id": "agent_context-5", "section": "TemplateId → renderer type mapping and instantiation mode", "anchor": "templateid-renderer-type-mapping-and-instantiation-mode", "level": 3, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "templateid", "→", "renderer", "type", "mapping", "and", "instantiation", "mode"], "part_index": 0, "text": "### TemplateId → renderer type mapping and instantiation mode\n\nUse this list to pick the serialized element type and whether to inline or wrap as a templated-element. If no direct renderer type exists in `generic-element.component.html`, default to wrapper so the engine can realize internal composition.\n\n- image → type: \"image\" (inline)\n- video → type: \"video\" (inline)\n- icon-svg → type: \"icon-svg\" (inline)\n- text → type: \"text\" (inline)\n- button-basic → wrapper (composite) → type: \"templated-element\" with properties.templateId=\"button-basic\"\n- toggle-ios → wrapper (no direct type)\n- tabbar-ios → wrapper\n- stepper-ios → wrapper\n- status-bar-ios → wrapper\n- slider-ios → wrapper\n- sidebar-ios → wrapper\n- segmented-control-ios → wrapper\n- progress-indicator-ios → wrapper\n- progress-bar-ios → wrapper (map to \"progress-bar\" only if your adapter resolves to that type)\n- date-time-picker-ios → wrapper\n- page-control-ios → wrapper\n- notification-ios → wrapper\n- navbar-ios → type: \"navbar\" (inline)\n- menu-ios → wrapper\n- input-ios → type: \"input-ios\" (inline)\n- alert-ios → wrapper\n- action-sheet-ios → wrapper\n- ios-button → type: \"button-ios\" (inline)\n- text-field-android → wrapper\n- tab-bar-android → wrapper\n- toggle-android → type: \"toggle-android\" (inline)\n- slider-android → type: \"slider-android\" (inline)\n- side-sheet-android → wrapper\n- bottom-sheet-android → wrapper\n- search-bar-android → wrapper\n- radio-android → type: \"radio-android\" (inline)\n- menu-android → wrapper\n- list-android → wrapper\n- segmented-buttons-android → wrapper\n- icon-button-android → type: \"icon-button-android\" (inline)\n- fab-extended-android → type: \"extended-fab-android\" (inline)\n- fab-android → type: \"fab-android\" (inline)\n- dialog-android → wrapper\n- chip-android → type: \"chip-android\" (inline)\n- checkbox-android → type: \"checkbox\" (inline)\n- android-button → type: \"buttonAndroid\" (inline)\n- web-button → type: \"buttonWeb\" (inline)\n- sidebar-web → type: \"sidebar-web\" (inline)\n- card-web → wrapper\n- list-group-web → wrapper\n- tab-group-web → wrapper\n- pagination-web → wrapper\n- notification-web → wrapper\n- progress-web → type: \"progress-bar\" (inline)\n- input-web → wrapper\n- toggle-web → type: \"toggle-web\" (inline)\n- checkbox-web → type: \"checkbox-web\" (inline)\n- radio-web → type: \"radio-web\" (inline)\n- select-web → type: \"select-web\" (inline)\n\nAliases used by the renderer\n- extended-fab-android is the renderer type for templateId \"fab-extended-android\"\n- buttonAndroid is the renderer type for templateId \"android-button\"\n- buttonWeb is the renderer type for templateId \"web-button\""}
{"id": "agent_context-6", "section": "Serialized element schema (baseline)", "anchor": "serialized-element-schema-baseline", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "serialized", "element", "schema", "(baseline)"], "part_index": 0, "text": "## Serialized element schema (baseline)\n\n```json\n{\n  \"id\": \"uuid\",\n  \"type\": \"<element-type>\",\n  \"properties\": { \"<key>\": <value>, ... },\n  \"children\": [ { /* same schema */ } ]\n}\n```\n\nKeys in `properties` map to the `CommonProperties` enum and any element-specific properties (adapters can add their own)."}
{"id": "agent_context-7", "section": "Common properties (always available)", "anchor": "common-properties-always-available", "level": 3, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "common", "properties", "(always", "available)"], "part_index": 0, "text": "### Common properties (always available)\n\nIdentity & meta\n- name: string\n- bindingKey: string | null\n- templateId: string | null\n- referenceElementId: string | null\n\nPlacement & sizing\n- position: string (default: \"absolute\")\n- left, top, right, bottom: number | null (Decimal(2))\n- width, height: number | null (Decimal(2))\n- widthBehavior, heightBehavior: 'fixed' | 'hug'\n- lockAspectRatio: boolean\n- scale: number\n- rotation: number (°)\n- zIndex: number\n\nVisibility & effects\n- visible: boolean\n- opacity: number (0..100)\n- clip: boolean (internal)\n\nStyle\n- fill, stroke: color\n- strokeStyle: select (border style options)\n- borderRadius: number | object\n- strokeWidth: number\n- strokePosition: select\n- margin: number (hidden)\n- padding: Box\n- boxShadow, innerShadow, dropShadow: objects\n- layerBlur, bgBlur: number\n\nConstraints (hidden defaults)\n- minWidth, minHeight, maxWidth, maxHeight\n\nHierarchy & state\n- parent: object (internal)\n- state: select\n- states: array (internal, used by PropertyStates)"}
{"id": "agent_context-8", "section": "Behaviors and rules", "anchor": "behaviors-and-rules", "level": 3, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "behaviors", "and", "rules"], "part_index": 0, "text": "### Behaviors and rules\n\n- Hug vs fixed: 'hug' disables width/height (size follows content). 'fixed' enables explicit size.\n- Aspect ratio: when `lockAspectRatio` is true, setting one dimension adjusts the other (unless the other behavior is 'fill').\n- Invalidation: property changes trigger `invalidate(...)` and propagate up/down the hierarchy for recalculation."}
{"id": "agent_context-9", "section": "Bindings (dynamic properties)", "anchor": "bindings-dynamic-properties", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "bindings", "(dynamic", "properties)"], "part_index": 0, "text": "## Bindings (dynamic properties)\n\n- Bindings link a source element/property to a target element/property.\n- Use bindings for user-created components or dynamic UI behavior instead of fixed values.\n- Bindings are applied via adapter-level APIs (PropertyBinding). When serializing, include a `bindings` section if applicable."}
{"id": "agent_context-10", "section": "Layout model", "anchor": "layout-model", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "layout", "model"], "part_index": 0, "text": "## Layout model\n\n- Current default: absolute positioning using `position`, `left`, `top`, etc.\n- Goal: responsive design using a flex-like model (analogous to CSS flexbox) for groups/containers.\n- Agents should:\n  - For absolute layouts, set explicit coordinates/sizes or use 'hug' for content-driven sizes.\n  - For future flex layouts, prefer container elements and properties that align children (e.g., justify/align/gap) when available in templates/adapters."}
{"id": "agent_context-11", "section": "States & design tokens", "anchor": "states-design-tokens", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "states", "&", "design", "tokens"], "part_index": 0, "text": "## States & design tokens\n\n- `states` define alternate property sets per element state (e.g., hover, active), applied via `PropertyStates`.\n- Tokens (`tokens: Record<string, any>`) allow themeable values; `getValueFromToken('group.key')` resolves along the parent chain.\n- For HTML/CSS export, prefer tokenized colors, spacing, and typography when available."}
{"id": "agent_context-12", "section": "Tool-call recipes (expected JSON commands)", "anchor": "tool-call-recipes-expected-json-commands", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "tool-call", "recipes", "(expected", "json", "commands)"], "part_index": 0, "text": "## Tool-call recipes (expected JSON commands)\n\nCreate or add elements\n```json\n{\n  \"tool\": \"add_to_workspace\",\n  \"args\": {\n    \"elements\": [\n      {\n        \"type\": \"templated-element\",\n        \"properties\": {\n          \"templateId\": \"button-basic\",\n          \"name\": \"PrimaryCTA\"\n        }\n      }\n    ]\n  }\n}\n```\n\nAdd child to a parent\n```json\n{\n  \"tool\": \"add_to_parent\",\n  \"args\": {\n    \"parentId\": \"uuid\",\n    \"child\": {\n      \"type\": \"image\",\n      \"properties\": {\n        \"name\": \"Logo\",\n        \"src\": { \"type\": \"url\", \"value\": \"https://...\" }\n      }\n    }\n  }\n}\n```\n\nModify existing elements\n```json\n{\n  \"tool\": \"modify_element\",\n  \"args\": {\n    \"elements\": [\n      {\n        \"id\": \"uuid\",\n        \"properties\": {\n          \"widthBehavior\": \"fixed\",\n          \"width\": 320,\n          \"height\": 80,\n          \"fill\": { \"type\": \"solid\", \"alpha\": 1, \"color\": \"#1d4ed8\" }\n        }\n      }\n    ]\n  }\n}\n```\n\nDeletion\n- Provide the element `id` and indicate deletion via a high-level tool or a specific delete command if available in the backend API."}
{"id": "agent_context-13", "section": "Best practices for the agent", "anchor": "best-practices-for-the-agent", "level": 2, "path": "data/agent_context.md", "tags": ["agent-context", "ninjamock", "best", "practices", "for", "the", "agent"], "part_index": 0, "text": "## Best practices for the agent\n\n- Prefer templates (`templated-element`) for standard UI patterns; they may instantiate multi-element compositions with correct defaults and states.\n- When using direct element types, set only compatible properties (respect disabled/hidden ones under current behaviors).\n- Use 'hug' when layout should be content-driven; otherwise use 'fixed' with explicit dimensions.\n- Respect constraints (decimals for size/position, opacity 0..100, rotation within [-360..360]).\n- For grouping/composition, use `container` or appropriate layout elements (e.g., stack layouts) as parents.\n- Bindings should be used where dynamic or synchronized behavior between elements is needed.\n\n---\n\nThis document intentionally omits Angular classes, services, and general project architecture to keep RAG focused on design elements and their JSON schemas."}
